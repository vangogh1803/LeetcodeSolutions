https://leetcode.com/problems/climbing-stairs/
//Time=O(N) and Space=O(N)--> DP Approach
class Solution {
public:
    int t[46];
    int solve(int n){
        if(n<0){
            return 0;
        }
        if(t[n]!=-1){
            return t[n];
        }
        if(n==0){  //we reached destination
            return 1;
        }
        int one_step=solve(n-1);
        int two_step=solve(n-2);
        return t[n]= one_step+two_step;
    }

    int climbStairs(int n) {
        memset(t,-1,sizeof(t));
        return solve(n);
        
    }
};

//Time=O(N) and Space= O(1)-->Normal Fibo Approach
class Solution {
public:
    int climbStairs(int n){
       int prev=1;
       int prev_2=1;

       for(int i=2;i<=n;i++){
        int curr=prev+prev_2;
        prev_2=prev;
        prev=curr;
       }
       return prev;
    }
};
