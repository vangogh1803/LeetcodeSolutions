https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/0
Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//---------------------------------------------------------------------------------------

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int N, vector<int> adj[]) {
        // code here
        
        vector<int>indegree(N,0); //N elements and initialised to 0
        queue<int>q;
        
        for(int u=0;u<N;u++){
            for(int &v: adj[u]){
                indegree[v]++;
            }
        }
        for(int i=0;i<N;i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }
        int count=0;
        vector<int>result;
        while(!q.empty()){
            int u=q.front();
            result.push_back(u);
            q.pop();
        count++;        
            
        for(int &v:adj[u]){
            indegree[v]--;
        if(indegree[v]==0){
            q.push(v);
        }
        }
        }
        if(count==N){
            return false;
        }
        else {return true;}
    }
};
//-------------------------------------------------------------------------------------------
//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
        }

        Solution obj;
        cout << obj.isCyclic(V, adj) << "\n";
    }

    return 0;
}

// } Driver Code Ends
